---
apiVersion: v1
kind: Namespace
metadata:
  name: tnf-collector
  labels:
    name: tnf-collector

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  namespace: tnf-collector
  labels:
    type: local
spec:
  capacity:
    storage: 300Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/data"
    
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: tnf-collector
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: tnf-collector
  name: mysql-r
  rules:
    - apiGroups: [""]
      resources: ["*"]
      verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mysql-rb
  namespace: tnf-collector
subjects:
  - kind: ServiceAccount
    name: mysql-sa
roleRef:
  kind: Role
  name: mysql-r
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysql-sa
  namespace: tnf-collector

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: tnf-collector
spec:
  ports:
    - port: 3306
      protocol: TCP
      name: mysql
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: v1
kind: Secret
metadata:
  name: collectorapi-secrets
  namespace: tnf-collector
type: Opaque
data:
  db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-scripts
  namespace: tnf-collector
data:
  create_schema.sql: |
    create database if not exists cnf;
    use cnf;

    create table if not exists claim (
      id int not null AUTO_INCREMENT,
      cnf_version varchar(50) not null,
      executed_by  varchar(50) not null,
      upload_time datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      partner_name varchar(50),
      mark_for_delete boolean DEFAULT false,
      primary key (id)
    );

    create table if not exists claim_result (
      id int not null AUTO_INCREMENT,
      claim_id int not null,
      suite_name varchar(255),
      test_id varchar(255),
      test_status varchar(10) not null,
      primary key (id),
      foreign key (claim_id) references claim(id)
    );

    set @x := (
      select count(*) from information_schema.statistics
      where table_name = 'claim'
      and index_name = 'claim_upload_datetime'
      and table_schema = database());
    set @sql := if(
      @x > 0,
      'select ''Index exists.''',
      'create index claim_upload_datetime on claim (upload_time);');
    PREPARE stmt FROM @sql;
    EXECUTE stmt;

    create table if not exists authenticator (
      partner_name varchar(255) not null,
      encoded_password varchar(255) not null
    );

    insert into authenticator (partner_name, encoded_password)
    # temporary encoded password - will be changed saved in Bitwarden
    select 'admin', '$2a$04$9D2A660Ez6SyE4hvhOjqn.6hODSsA/aitF7GpM7DgGL.KQZ/djOhK'
    from dual
    where not exists (select 1 from authenticator limit 1);

  create_user.sql: |
    CREATE USER if not exists 'collectoruser'@'%' IDENTIFIED BY 'password';
    GRANT ALL PRIVILEGES ON cnf.claim TO 'collectoruser'@'%';
    GRANT ALL PRIVILEGES ON cnf.claim_result TO 'collectoruser'@'%';
    GRANT ALL PRIVILEGES ON cnf.authenticator TO 'collectoruser'@'%';
    FLUSH PRIVILEGES;

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: tnf-collector
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      serviceAccountName: "mysql-sa"
      containers:
        - image: mysql:8.0.33
          name: mysql-container
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          resources:
            requests:
              cpu: 100m
              memory: 250Mi
            limits:
              cpu: 500m
              memory: 500Mi
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: collectorapi-secrets
                  key: db_root_password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
            - name: initdb-volume
              mountPath: /scripts
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    while ! mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD; do
                      sleep 10;
                    done
                    mysql -uroot -p$MYSQL_ROOT_PASSWORD < /scripts/create_schema.sql
                    mysql -uroot -p$MYSQL_ROOT_PASSWORD < /scripts/create_user.sql
          imagePullPolicy: IfNotPresent
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
        - name: initdb-volume
          configMap:
            name: initdb-scripts
            defaultMode: 0755
