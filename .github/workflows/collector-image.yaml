---
name: 'Publish the collector image'
"on":
  # Run the workflow when a new release gets published
  release:
    types: [published]
  # Run the workflow every day at 5 am UTC (1 am EST, 7am CET)
  # This is useful for keeping the image up-to-date with security
  # patches provided in the UBI.
  # Disclaimer: There is no guarantee that scheduled workflows will
  # run at the predefined time, if at all. The delay is usually
  # around 10-30 minutes.
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
defaults:
  run:
    shell: bash
env:
  COLLECTOR_CONTAINER_NAME: tnf-collector
  REGISTRY: quay.io
  COLLECTOR_IMAGE_NAME: testnetworkfunction/collector
  COLLECTOR_IMAGE_TAG: latest
  COLLECTOR_SRC_URL: 'https://github.com/${{ github.repository }}'

jobs:
  test-and-push-collector-image-main:
    name: 'Test and push the collector image'
    runs-on: ubuntu-22.04
    env:
      SHELL: /bin/bash
      COLLECTOR_VERSION: ""
      CURRENT_VERSION_GENERIC_BRANCH: main
    steps:
      - name: Checkout generic working branch of the current version
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CURRENT_VERSION_GENERIC_BRANCH }}
          fetch-depth: '0'

      - name: Get the latest collector version from GIT
        run: |
          GIT_RELEASE=$(git tag --points-at HEAD | head -n 1)
          GIT_PREVIOUS_RELEASE=$(git tag --no-contains HEAD --sort=v:refname | tail -n 1)
          GIT_LATEST_RELEASE=$GIT_RELEASE
          if [ -z "$GIT_RELEASE" ]; then
            GIT_LATEST_RELEASE=$GIT_PREVIOUS_RELEASE
          fi

          echo "version_number=$GIT_LATEST_RELEASE" >> $GITHUB_OUTPUT
        id: set_COLLECTOR_VERSION

      - name: Print the latest collector version from GIT
        run: |
          echo Version tag: ${{ steps.set_COLLECTOR_VERSION.outputs.version_number }}

      - name: Update env variables
        run: |
          echo "COLLECTOR_VERSION=${{ steps.set_COLLECTOR_VERSION.outputs.version_number }}" >> $GITHUB_ENV

      - name: Ensure $COLLECTOR_VERSION and $COLLECTOR_IMAGE_TAG are set
        run: '[[ -n "$COLLECTOR_VERSION" ]] && [[ -n "$COLLECTOR_IMAGE_TAG" ]]'

      - name: Check whether the version tag exists on remote
        run: git ls-remote --exit-code $COLLECTOR_SRC_URL refs/tags/$COLLECTOR_VERSION

      - name: (if tag is missing) Display debug message
        if: ${{ failure() }}
        run: echo "Tag '$COLLECTOR_VERSION' does not exist on remote $COLLECTOR_SRC_URL"

      - name: Checkout the version tag
        uses: actions/checkout@v4
        with:
          ref: ${{ env.COLLECTOR_VERSION }}

      - name: Build the `collector` image
        run: |
          make build-image-collector-by-version
        env:
          COLLECTOR_VERSION: ${{ env.COLLECTOR_VERSION }}

      # Push the new TNF image to Quay.io.
      - name: Authenticate against Quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          # Use a Robot Account to authenticate against Quay.io
          # https://docs.quay.io/glossary/robot-accounts.html
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Push the newly built image to Quay.io
        run: docker push --all-tags ${REGISTRY}/${COLLECTOR_IMAGE_NAME}

      - uses: webfactory/ssh-agent@v0.8.0
        name: (if on main and upstream) Add SSH key to agent
        if: ${{ github.ref == 'refs/heads/main' && github.repository_owner == 'test-network-function' }}
        with:
          ssh-private-key: ${{ secrets.COLLECTOR_KEYPAIR }}

        # run ansible deployment to deploy the new image to the cluster
      - name: (if on main and upstream) Deploy the newly built image to the cluster
        if: ${{ github.ref == 'refs/heads/main' && github.repository_owner == 'test-network-function' }}
        run: ansible-playbook -i playbooks/inventory.ini playbooks/start-collector.yaml
